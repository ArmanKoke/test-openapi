// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// LaunchGameParams is parameters of launchGame operation.
type LaunchGameParams struct {
	// The customer ID.
	// Will be provided to you by your account manager.
	CustomerId OptString
	// The ID of the customer’s brand.
	// Will be provided to you by your account manager.
	BrandId OptString
	// The play mode which can be one of:
	// 1 – real money
	// 3 – anonymous.
	PlayMode OptPlayMode
	// A token which will later be sent by the game server to
	// the game provider’s system to uniquely identify the
	// player’s session.
	// Mandatory parameter except for anonymous play mode.
	SecurityToken OptString
	// The unique ID of the player’s account in the game
	// provider’s system.
	// Mandatory parameter except for anonymous play mode.
	PlayerId OptString
	// The player’s nickname.
	// Mandatory parameter except for anonymous play mode.
	Nickname OptString
	// The current player’s balance in cents.
	// In anonymous play mode the balance parameter will set
	// the initial balance, and when the player tries to make a
	// wager greater than his/her available balance, his/her
	// balance will be reloaded automatically to the initial
	// balance.
	Balance OptInt64
	// ISO 4217 currency code.
	// For example: “EUR”, “GBP”.
	Currency OptString
	// ISO 639-1 language code.
	// For example: “en”, “nl”.
	Language OptString
	// ISO 3166 country code.
	// For example: “GB”, “DE”.
	Country OptString
	// The unique game ID.
	ProviderGameId OptString
	// URL to the game aggregator’s lobby.
	LobbyURL OptString
	// ISO 3166 country code.
	// Specifies the jurisdiction under which this game is
	// being played. The game will enforce specific
	// jurisdiction requirements based on this parameter.
	// For example: use “GB” to conform with UKGC
	// requirements.
	// If not provided, no specific jurisdiction requirements are
	// applied.
	Jurisdiction OptString
	// Specifies the time interval in seconds at which the
	// reality check will appear on the screen. A zero value
	// indicates no time interval which means that the reality
	// check will never be presented (or presented just once if
	// realityCheckStartTime is provided).
	// Mandatory in case jurisdiction parameters are set to one
	// which requires reality checks.
	// If the specified jurisdiction does not require reality
	// checks, or is not provided, but this parameter is
	// provided, an error will be returned.
	RealityCheckInterval OptInt32
	// Indicates the seconds to wait until the 1st reality check
	// should be presented. A zero value means that the reality
	// check should be presented immediately w/o delay.
	// If you don’t want to present a reality check at all, just
	// set realityCheckInterval to zero, and don’t set
	// realityCheckStartTime at all.
	// This parameter provides a way to seamlessly continue
	// previous reality checks presented during the player’s
	// game session.
	// If not provided, realityCheckInterval is used instead.
	RealityCheckStartTime OptInt32
	// The game audio mode which can be one of:
	// 1 – on (default on PC)
	// 2 – off
	// 3 – ask player
	// Audio mode 3 is only relevant for Mobile. On PC only
	// modes 1 and 2 are valid.
	// Player preferences made during the session will
	// override this.
	Audio OptAudioMode
	// The origin url of the lobby opening the game.
	OriginUrl OptString
	// The minimum bet allowed (for supported games only).
	MinBet OptInt64
	// The max total bet allowed (for supported games only).
	MaxTotalBet OptInt64
	// The default bet (for supported games only).
	DefaultBet OptInt64
}

func unpackLaunchGameParams(packed middleware.Parameters) (params LaunchGameParams) {
	{
		key := middleware.ParameterKey{
			Name: "customerId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CustomerId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "brandId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrandId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "playMode",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PlayMode = v.(OptPlayMode)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "securityToken",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SecurityToken = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "playerId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PlayerId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "nickname",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Nickname = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "balance",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Balance = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "currency",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Currency = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "providerGameId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProviderGameId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "lobbyURL",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LobbyURL = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "jurisdiction",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Jurisdiction = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "realityCheckInterval",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RealityCheckInterval = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "realityCheckStartTime",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RealityCheckStartTime = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "audio",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Audio = v.(OptAudioMode)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "originUrl",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OriginUrl = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "minBet",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MinBet = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "maxTotalBet",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MaxTotalBet = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "defaultBet",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DefaultBet = v.(OptInt64)
		}
	}
	return params
}

func decodeLaunchGameParams(args [0]string, argsEscaped bool, r *http.Request) (params LaunchGameParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: customerId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "customerId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCustomerIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCustomerIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CustomerId.SetTo(paramsDotCustomerIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "customerId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: brandId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brandId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrandIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrandIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrandId.SetTo(paramsDotBrandIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brandId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: playMode.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "playMode",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPlayModeVal PlayMode
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt8(val)
					if err != nil {
						return err
					}

					paramsDotPlayModeVal = PlayMode(c)
					return nil
				}(); err != nil {
					return err
				}
				params.PlayMode.SetTo(paramsDotPlayModeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PlayMode.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playMode",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: securityToken.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "securityToken",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSecurityTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSecurityTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SecurityToken.SetTo(paramsDotSecurityTokenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "securityToken",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: playerId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "playerId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPlayerIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPlayerIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PlayerId.SetTo(paramsDotPlayerIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playerId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: nickname.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "nickname",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNicknameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNicknameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Nickname.SetTo(paramsDotNicknameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "nickname",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: balance.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "balance",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBalanceVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotBalanceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Balance.SetTo(paramsDotBalanceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "balance",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: currency.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "currency",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCurrencyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCurrencyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Currency.SetTo(paramsDotCurrencyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "currency",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLanguageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCountryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: providerGameId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "providerGameId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProviderGameIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotProviderGameIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProviderGameId.SetTo(paramsDotProviderGameIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "providerGameId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: lobbyURL.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "lobbyURL",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLobbyURLVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLobbyURLVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LobbyURL.SetTo(paramsDotLobbyURLVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "lobbyURL",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: jurisdiction.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "jurisdiction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotJurisdictionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotJurisdictionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Jurisdiction.SetTo(paramsDotJurisdictionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jurisdiction",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: realityCheckInterval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "realityCheckInterval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRealityCheckIntervalVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotRealityCheckIntervalVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RealityCheckInterval.SetTo(paramsDotRealityCheckIntervalVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "realityCheckInterval",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: realityCheckStartTime.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "realityCheckStartTime",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRealityCheckStartTimeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotRealityCheckStartTimeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RealityCheckStartTime.SetTo(paramsDotRealityCheckStartTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "realityCheckStartTime",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: audio.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "audio",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAudioVal AudioMode
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt8(val)
					if err != nil {
						return err
					}

					paramsDotAudioVal = AudioMode(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Audio.SetTo(paramsDotAudioVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Audio.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "audio",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: originUrl.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "originUrl",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOriginUrlVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOriginUrlVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OriginUrl.SetTo(paramsDotOriginUrlVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "originUrl",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: minBet.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "minBet",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinBetVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotMinBetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MinBet.SetTo(paramsDotMinBetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "minBet",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: maxTotalBet.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "maxTotalBet",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMaxTotalBetVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotMaxTotalBetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MaxTotalBet.SetTo(paramsDotMaxTotalBetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "maxTotalBet",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: defaultBet.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "defaultBet",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDefaultBetVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotDefaultBetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DefaultBet.SetTo(paramsDotDefaultBetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "defaultBet",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
