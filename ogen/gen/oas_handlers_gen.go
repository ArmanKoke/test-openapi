// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/otelogen"
)

// handleBetRequest handles bet operation.
//
// The debit method is called when the player makes a bet.
//
// POST /debit
func (s *Server) handleBetRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("bet"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/debit"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "Bet",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "Bet",
			ID:   "bet",
		}
	)
	request, close, err := s.decodeBetRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response BetOK
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "Bet",
			OperationSummary: "The debit method is called when the player makes a bet",
			OperationID:      "bet",
			Body:             request,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = OptBetRequest
			Params   = struct{}
			Response = BetOK
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.Bet(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.Bet(ctx, request)
	}
	if err != nil {
		if errRes, ok := errors.Into[*ErrorStatusCode](err); ok {
			if err := encodeErrorResponse(errRes, w, span); err != nil {
				recordError("Internal", err)
			}
			return
		}
		if errors.Is(err, ht.ErrNotImplemented) {
			s.cfg.ErrorHandler(ctx, w, r, err)
			return
		}
		if err := encodeErrorResponse(s.h.NewError(ctx, err), w, span); err != nil {
			recordError("Internal", err)
		}
		return
	}

	if err := encodeBetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleLaunchGameRequest handles launchGame operation.
//
// Launch game on provider side.
//
// GET /launchGame
func (s *Server) handleLaunchGameRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("launchGame"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/launchGame"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "LaunchGame",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "LaunchGame",
			ID:   "launchGame",
		}
	)
	params, err := decodeLaunchGameParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response *LaunchGameMovedPermanently
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "LaunchGame",
			OperationSummary: "Launch game on provider side",
			OperationID:      "launchGame",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "customerId",
					In:   "query",
				}: params.CustomerId,
				{
					Name: "brandId",
					In:   "query",
				}: params.BrandId,
				{
					Name: "playMode",
					In:   "query",
				}: params.PlayMode,
				{
					Name: "securityToken",
					In:   "query",
				}: params.SecurityToken,
				{
					Name: "playerId",
					In:   "query",
				}: params.PlayerId,
				{
					Name: "nickname",
					In:   "query",
				}: params.Nickname,
				{
					Name: "balance",
					In:   "query",
				}: params.Balance,
				{
					Name: "currency",
					In:   "query",
				}: params.Currency,
				{
					Name: "language",
					In:   "query",
				}: params.Language,
				{
					Name: "country",
					In:   "query",
				}: params.Country,
				{
					Name: "providerGameId",
					In:   "query",
				}: params.ProviderGameId,
				{
					Name: "lobbyURL",
					In:   "query",
				}: params.LobbyURL,
				{
					Name: "jurisdiction",
					In:   "query",
				}: params.Jurisdiction,
				{
					Name: "realityCheckInterval",
					In:   "query",
				}: params.RealityCheckInterval,
				{
					Name: "realityCheckStartTime",
					In:   "query",
				}: params.RealityCheckStartTime,
				{
					Name: "audio",
					In:   "query",
				}: params.Audio,
				{
					Name: "originUrl",
					In:   "query",
				}: params.OriginUrl,
				{
					Name: "minBet",
					In:   "query",
				}: params.MinBet,
				{
					Name: "maxTotalBet",
					In:   "query",
				}: params.MaxTotalBet,
				{
					Name: "defaultBet",
					In:   "query",
				}: params.DefaultBet,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = LaunchGameParams
			Response = *LaunchGameMovedPermanently
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackLaunchGameParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				err = s.h.LaunchGame(ctx, params)
				return response, err
			},
		)
	} else {
		err = s.h.LaunchGame(ctx, params)
	}
	if err != nil {
		if errRes, ok := errors.Into[*ErrorStatusCode](err); ok {
			if err := encodeErrorResponse(errRes, w, span); err != nil {
				recordError("Internal", err)
			}
			return
		}
		if errors.Is(err, ht.ErrNotImplemented) {
			s.cfg.ErrorHandler(ctx, w, r, err)
			return
		}
		if err := encodeErrorResponse(s.h.NewError(ctx, err), w, span); err != nil {
			recordError("Internal", err)
		}
		return
	}

	if err := encodeLaunchGameResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}
