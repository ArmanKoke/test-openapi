// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// The game audio mode which can be one of:
// 1 – on (default on PC)
// 2 – off
// 3 – ask player
// Audio mode 3 is only relevant for Mobile. On PC only
// modes 1 and 2 are valid.
// Player preferences made during the session will
// override this.
// Ref: #/components/schemas/AudioMode
type AudioMode int8

const (
	AudioMode1 AudioMode = 1
	AudioMode2 AudioMode = 2
	AudioMode3 AudioMode = 3
)

// AllValues returns all AudioMode values.
func (AudioMode) AllValues() []AudioMode {
	return []AudioMode{
		AudioMode1,
		AudioMode2,
		AudioMode3,
	}
}

// BetOK represents sum type.
type BetOK struct {
	Type             BetOKType // switch on this field
	BetResponse      BetResponse
	IntegrationError IntegrationError
}

// BetOKType is oneOf type of BetOK.
type BetOKType string

// Possible values for BetOKType.
const (
	BetResponseBetOK      BetOKType = "BetResponse"
	IntegrationErrorBetOK BetOKType = "IntegrationError"
)

// IsBetResponse reports whether BetOK is BetResponse.
func (s BetOK) IsBetResponse() bool { return s.Type == BetResponseBetOK }

// IsIntegrationError reports whether BetOK is IntegrationError.
func (s BetOK) IsIntegrationError() bool { return s.Type == IntegrationErrorBetOK }

// SetBetResponse sets BetOK to BetResponse.
func (s *BetOK) SetBetResponse(v BetResponse) {
	s.Type = BetResponseBetOK
	s.BetResponse = v
}

// GetBetResponse returns BetResponse and true boolean if BetOK is BetResponse.
func (s BetOK) GetBetResponse() (v BetResponse, ok bool) {
	if !s.IsBetResponse() {
		return v, false
	}
	return s.BetResponse, true
}

// NewBetResponseBetOK returns new BetOK from BetResponse.
func NewBetResponseBetOK(v BetResponse) BetOK {
	var s BetOK
	s.SetBetResponse(v)
	return s
}

// SetIntegrationError sets BetOK to IntegrationError.
func (s *BetOK) SetIntegrationError(v IntegrationError) {
	s.Type = IntegrationErrorBetOK
	s.IntegrationError = v
}

// GetIntegrationError returns IntegrationError and true boolean if BetOK is IntegrationError.
func (s BetOK) GetIntegrationError() (v IntegrationError, ok bool) {
	if !s.IsIntegrationError() {
		return v, false
	}
	return s.IntegrationError, true
}

// NewIntegrationErrorBetOK returns new BetOK from IntegrationError.
func NewIntegrationErrorBetOK(v IntegrationError) BetOK {
	var s BetOK
	s.SetIntegrationError(v)
	return s
}

// Ref: #/components/schemas/BetRequest
type BetRequest struct {
	// This is the shared
	// secret between the
	// game aggregator and
	// the game provider
	// The secret is configured by
	// the Game aggregator admin
	// for each game provider
	// separately. See Security
	// section above.
	Secret OptString `json:"secret"`
	// The unique session id
	// for the new session.
	// Each game launching will
	// create a new session.
	SessionId OptString `json:"sessionId"`
	// The security token is
	// provided so that the
	// wallet platform can
	// uniquely identify the
	// player’s session
	// The security token was
	// previously provided to the
	// Game aggregator upon
	// launching the game or
	// replaced with serverToken
	// on initGame call.
	SecurityToken OptString `json:"securityToken"`
	// The ID of the player’s
	// account in the game
	// provider’s system
	// Uniquely identifies a player
	// account per brand.
	PlayerId OptString   `json:"playerId"`
	PlayMode OptPlayMode `json:"playMode"`
	// The game ID
	// Each game has a unique ID.
	ProviderGameId OptString `json:"providerGameId"`
	// The unique round ID.
	RoundId OptString `json:"roundId"`
	// The secondary round
	// identifier which was
	// provided for the
	// original round (used
	// for games free round /
	// bonus round feature \
	// multiple credit\debit).
	SecondaryRoundId OptString `json:"secondaryRoundId"`
	// The unique transaction ID of the debit.
	TransactionId OptString `json:"transactionId"`
	// The ISO 4217 code e.g. EUR.
	Currency OptString `json:"currency"`
	// The bet amount made in cents.
	Amount OptInt64 `json:"amount"`
	// CloseRound = true means
	// no further request for the
	// given roundId should be
	// handled.
	CloseRound OptBool `json:"closeRound"`
}

// GetSecret returns the value of Secret.
func (s *BetRequest) GetSecret() OptString {
	return s.Secret
}

// GetSessionId returns the value of SessionId.
func (s *BetRequest) GetSessionId() OptString {
	return s.SessionId
}

// GetSecurityToken returns the value of SecurityToken.
func (s *BetRequest) GetSecurityToken() OptString {
	return s.SecurityToken
}

// GetPlayerId returns the value of PlayerId.
func (s *BetRequest) GetPlayerId() OptString {
	return s.PlayerId
}

// GetPlayMode returns the value of PlayMode.
func (s *BetRequest) GetPlayMode() OptPlayMode {
	return s.PlayMode
}

// GetProviderGameId returns the value of ProviderGameId.
func (s *BetRequest) GetProviderGameId() OptString {
	return s.ProviderGameId
}

// GetRoundId returns the value of RoundId.
func (s *BetRequest) GetRoundId() OptString {
	return s.RoundId
}

// GetSecondaryRoundId returns the value of SecondaryRoundId.
func (s *BetRequest) GetSecondaryRoundId() OptString {
	return s.SecondaryRoundId
}

// GetTransactionId returns the value of TransactionId.
func (s *BetRequest) GetTransactionId() OptString {
	return s.TransactionId
}

// GetCurrency returns the value of Currency.
func (s *BetRequest) GetCurrency() OptString {
	return s.Currency
}

// GetAmount returns the value of Amount.
func (s *BetRequest) GetAmount() OptInt64 {
	return s.Amount
}

// GetCloseRound returns the value of CloseRound.
func (s *BetRequest) GetCloseRound() OptBool {
	return s.CloseRound
}

// SetSecret sets the value of Secret.
func (s *BetRequest) SetSecret(val OptString) {
	s.Secret = val
}

// SetSessionId sets the value of SessionId.
func (s *BetRequest) SetSessionId(val OptString) {
	s.SessionId = val
}

// SetSecurityToken sets the value of SecurityToken.
func (s *BetRequest) SetSecurityToken(val OptString) {
	s.SecurityToken = val
}

// SetPlayerId sets the value of PlayerId.
func (s *BetRequest) SetPlayerId(val OptString) {
	s.PlayerId = val
}

// SetPlayMode sets the value of PlayMode.
func (s *BetRequest) SetPlayMode(val OptPlayMode) {
	s.PlayMode = val
}

// SetProviderGameId sets the value of ProviderGameId.
func (s *BetRequest) SetProviderGameId(val OptString) {
	s.ProviderGameId = val
}

// SetRoundId sets the value of RoundId.
func (s *BetRequest) SetRoundId(val OptString) {
	s.RoundId = val
}

// SetSecondaryRoundId sets the value of SecondaryRoundId.
func (s *BetRequest) SetSecondaryRoundId(val OptString) {
	s.SecondaryRoundId = val
}

// SetTransactionId sets the value of TransactionId.
func (s *BetRequest) SetTransactionId(val OptString) {
	s.TransactionId = val
}

// SetCurrency sets the value of Currency.
func (s *BetRequest) SetCurrency(val OptString) {
	s.Currency = val
}

// SetAmount sets the value of Amount.
func (s *BetRequest) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetCloseRound sets the value of CloseRound.
func (s *BetRequest) SetCloseRound(val OptBool) {
	s.CloseRound = val
}

// Ref: #/components/schemas/BetResponse
type BetResponse struct {
	// True in case the request succeeded, false otherwise.
	Success OptBool `json:"success"`
	// Unique ID of the record in the game provider’s system.
	ReferenceId OptString `json:"referenceId"`
	// The ISO 4217 code.
	Currency OptString `json:"currency"`
	Balance  OptInt64  `json:"balance"`
	// The player’s account
	// cash balance in cents
	// Used in regulated markets.
	CashBalance OptInt64 `json:"cashBalance"`
	// The player’s account
	// bonus balance in
	// cents
	// Used in regulated markets.
	BonusBalance OptInt64 `json:"bonusBalance"`
}

// GetSuccess returns the value of Success.
func (s *BetResponse) GetSuccess() OptBool {
	return s.Success
}

// GetReferenceId returns the value of ReferenceId.
func (s *BetResponse) GetReferenceId() OptString {
	return s.ReferenceId
}

// GetCurrency returns the value of Currency.
func (s *BetResponse) GetCurrency() OptString {
	return s.Currency
}

// GetBalance returns the value of Balance.
func (s *BetResponse) GetBalance() OptInt64 {
	return s.Balance
}

// GetCashBalance returns the value of CashBalance.
func (s *BetResponse) GetCashBalance() OptInt64 {
	return s.CashBalance
}

// GetBonusBalance returns the value of BonusBalance.
func (s *BetResponse) GetBonusBalance() OptInt64 {
	return s.BonusBalance
}

// SetSuccess sets the value of Success.
func (s *BetResponse) SetSuccess(val OptBool) {
	s.Success = val
}

// SetReferenceId sets the value of ReferenceId.
func (s *BetResponse) SetReferenceId(val OptString) {
	s.ReferenceId = val
}

// SetCurrency sets the value of Currency.
func (s *BetResponse) SetCurrency(val OptString) {
	s.Currency = val
}

// SetBalance sets the value of Balance.
func (s *BetResponse) SetBalance(val OptInt64) {
	s.Balance = val
}

// SetCashBalance sets the value of CashBalance.
func (s *BetResponse) SetCashBalance(val OptInt64) {
	s.CashBalance = val
}

// SetBonusBalance sets the value of BonusBalance.
func (s *BetResponse) SetBonusBalance(val OptInt64) {
	s.BonusBalance = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// Error code.
	Code OptInt32 `json:"code"`
	// Error message.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptInt32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptInt32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/IntegrationError
type IntegrationError struct {
	// Will be set to false in case of failure.
	Success   OptBool                 `json:"success"`
	ErrorCode OptIntegrationErrorCode `json:"errorCode"`
	Balance   OptInt64                `json:"balance"`
	// The player’s account
	// cash balance in cents
	// Used in regulated markets.
	CashBalance OptInt64 `json:"cashBalance"`
	// The player’s account
	// bonus balance in
	// cents
	// Used in regulated markets.
	BonusBalance OptInt64 `json:"bonusBalance"`
}

// GetSuccess returns the value of Success.
func (s *IntegrationError) GetSuccess() OptBool {
	return s.Success
}

// GetErrorCode returns the value of ErrorCode.
func (s *IntegrationError) GetErrorCode() OptIntegrationErrorCode {
	return s.ErrorCode
}

// GetBalance returns the value of Balance.
func (s *IntegrationError) GetBalance() OptInt64 {
	return s.Balance
}

// GetCashBalance returns the value of CashBalance.
func (s *IntegrationError) GetCashBalance() OptInt64 {
	return s.CashBalance
}

// GetBonusBalance returns the value of BonusBalance.
func (s *IntegrationError) GetBonusBalance() OptInt64 {
	return s.BonusBalance
}

// SetSuccess sets the value of Success.
func (s *IntegrationError) SetSuccess(val OptBool) {
	s.Success = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *IntegrationError) SetErrorCode(val OptIntegrationErrorCode) {
	s.ErrorCode = val
}

// SetBalance sets the value of Balance.
func (s *IntegrationError) SetBalance(val OptInt64) {
	s.Balance = val
}

// SetCashBalance sets the value of CashBalance.
func (s *IntegrationError) SetCashBalance(val OptInt64) {
	s.CashBalance = val
}

// SetBonusBalance sets the value of BonusBalance.
func (s *IntegrationError) SetBonusBalance(val OptInt64) {
	s.BonusBalance = val
}

type IntegrationErrorCode string

// LaunchGameMovedPermanently is response for LaunchGame operation.
type LaunchGameMovedPermanently struct{}

// NewOptAudioMode returns new OptAudioMode with value set to v.
func NewOptAudioMode(v AudioMode) OptAudioMode {
	return OptAudioMode{
		Value: v,
		Set:   true,
	}
}

// OptAudioMode is optional AudioMode.
type OptAudioMode struct {
	Value AudioMode
	Set   bool
}

// IsSet returns true if OptAudioMode was set.
func (o OptAudioMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudioMode) Reset() {
	var v AudioMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudioMode) SetTo(v AudioMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudioMode) Get() (v AudioMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAudioMode) Or(d AudioMode) AudioMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBetRequest returns new OptBetRequest with value set to v.
func NewOptBetRequest(v BetRequest) OptBetRequest {
	return OptBetRequest{
		Value: v,
		Set:   true,
	}
}

// OptBetRequest is optional BetRequest.
type OptBetRequest struct {
	Value BetRequest
	Set   bool
}

// IsSet returns true if OptBetRequest was set.
func (o OptBetRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBetRequest) Reset() {
	var v BetRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBetRequest) SetTo(v BetRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBetRequest) Get() (v BetRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBetRequest) Or(d BetRequest) BetRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntegrationErrorCode returns new OptIntegrationErrorCode with value set to v.
func NewOptIntegrationErrorCode(v IntegrationErrorCode) OptIntegrationErrorCode {
	return OptIntegrationErrorCode{
		Value: v,
		Set:   true,
	}
}

// OptIntegrationErrorCode is optional IntegrationErrorCode.
type OptIntegrationErrorCode struct {
	Value IntegrationErrorCode
	Set   bool
}

// IsSet returns true if OptIntegrationErrorCode was set.
func (o OptIntegrationErrorCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntegrationErrorCode) Reset() {
	var v IntegrationErrorCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntegrationErrorCode) SetTo(v IntegrationErrorCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntegrationErrorCode) Get() (v IntegrationErrorCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntegrationErrorCode) Or(d IntegrationErrorCode) IntegrationErrorCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlayMode returns new OptPlayMode with value set to v.
func NewOptPlayMode(v PlayMode) OptPlayMode {
	return OptPlayMode{
		Value: v,
		Set:   true,
	}
}

// OptPlayMode is optional PlayMode.
type OptPlayMode struct {
	Value PlayMode
	Set   bool
}

// IsSet returns true if OptPlayMode was set.
func (o OptPlayMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlayMode) Reset() {
	var v PlayMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlayMode) SetTo(v PlayMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlayMode) Get() (v PlayMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlayMode) Or(d PlayMode) PlayMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// The play mode which can be one of:
// 1 – real money
// 3 – anonymous.
// Ref: #/components/schemas/PlayMode
type PlayMode int8

const (
	PlayMode1 PlayMode = 1
	PlayMode3 PlayMode = 3
)

// AllValues returns all PlayMode values.
func (PlayMode) AllValues() []PlayMode {
	return []PlayMode{
		PlayMode1,
		PlayMode3,
	}
}
